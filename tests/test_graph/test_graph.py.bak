import pytest

from math_helper.graph import DiGraph
from math_helper.graph import Graph
from math_helper.graph.helpers import mkg
from math_helper.graph.algorithms import ChromaticPolynomCreator, is_full, is_null, get_adjacent_vertices, is_tree
from math_helper.graph.iterators import DfsIterator, BfsIterator
from math_helper.graph.types import StrConvertable


@pytest.mark.parametrize(
    'graph, expected',
    (
        (mkg(['A']), True),
        (mkg(['A', 'B', 'C']), True),
        (mkg(edges=[('A', 'B')]), False),
    ),
)
def test_is_null(graph, expected):
    graph_is_null = is_null(graph)
    assert graph_is_null == expected


@pytest.mark.parametrize(
    'graph, expected',
    (
        (mkg(['A']), True),
        (mkg(['A', 'B', 'C']), False),
        (mkg(edges=[('A', 'B')]), True),
    ),
)
def test_is_full(graph, expected):
    graph_is_full = is_full(graph)
    assert graph_is_full == expected


@pytest.mark.parametrize(
    'graph, strategy, expected_polynom',
    (
        (mkg(['A']), None, 'K_{1}'),
        (mkg(['A']), 'O', 'O_{1}'),
        (mkg(['A', 'B']), None, 'K_{2} + K_{1}'),
        (mkg(['A', 'B']), 'O', 'O_{2}'),
        (mkg(edges=[('A', 'B')]), None, 'K_{2}'),
        (mkg(edges=[('A', 'B')]), 'O', 'O_{2} + (-1.0) * O_{1}'),
        (
            mkg(edges=[('A', 'B'), ('A', 'D'), ('A', 'C'), ('C', 'D')]),
            'O',
            'O_{4} + (-4.0) * O_{3} + (5.0) * O_{2} + (-2.0) * O_{1}',
        )
    ),
)
def test_get_chromatic_polynom(graph: Graph, strategy, expected_polynom) -> None:
    chromatic_polynom = ChromaticPolynomCreator.get_chromatic_polynom(graph, strategy)
    assert chromatic_polynom == expected_polynom


@pytest.mark.parametrize(
    'graph, target_vertex, expected_vertices',
    (
        (mkg(edges=[('a', 'b'), ('b', 'c'), ('a', 'c')]), 'a', {'b', 'c'}),
        (mkg(['d'], [('a', 'b'), ('b', 'c'), ('a', 'c')]), 'd', set()),
        (mkg(edges=[('a', 'b'), ('a', 'c'), ('a', 'd'), ('e', 'a')]), 'a', {'b', 'c', 'd', 'e'}),
        (mkg(edges=[('a', 'b'), ('a', 'c'), ('a', 'd'), ('e', 'a')]), 'e', {'a'}),
    ),
)
def test_get_adjacent_vertices(graph: Graph, target_vertex: str, expected_vertices: set[str]):
    adjacent_vertices = get_adjacent_vertices(graph, graph.get_vertex(target_vertex))
    assert {v.name for v in adjacent_vertices} == expected_vertices


@pytest.mark.parametrize(
    'graph, expected',
    (
        (mkg(), True),
        (mkg(['a']), True),
        (mkg(edges=[('a', 'b')]), True),
        (mkg(edges=[('a', 'b'), ('b', 'c'), ('a', 'c')]), False),
        (mkg(['d'], [('a', 'b'), ('b', 'c'), ('a', 'c')]), False),
        (mkg(edges=[('a', 'b'), ('a', 'c'), ('a', 'd'), ('e', 'a')]), True),
        (mkg(edges=[('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'f')]), True),
        (mkg(edges=[('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'b')]), False),
        (mkg(['z'], [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'f')]), False),
    ),
)
def test_is_tree(graph: Graph, expected: bool) -> None:
    graph_is_tree = is_tree(graph)
    assert graph_is_tree == expected


BIG_GRAPH_EDGES = [
    (1, 2),
    (1, 3),
    (2, 4),
    (2, 5),
    (3, 6),
    (3, 7),
    (4, 8),
    (4, 9),
    (5, 10),
    (5, 11),
    (6, 12),
    (6, 13),
    (7, 14),
    (7, 15),
    (8, 16),
    (8, 17),
]

BIG_GRAPH_1 = mkg(graph_type=Graph, edges=BIG_GRAPH_EDGES)
BIG_GRAPH_2 = mkg(graph_type=Graph, edges=BIG_GRAPH_EDGES)
BIG_GRAPH_2.make_edge(1, 16)

BIG_DIGRAPH_1 = mkg(graph_type=Digraph, edges=BIG_GRAPH_EDGES)
BIG_DIGRAPH_2 = mkg(graph_type=Digraph, edges=BIG_GRAPH_EDGES)
BIG_DIGRAPH_2.make_edge(1, 16)


@pytest.mark.parametrize(
    'graph, start_vertex_name, expected_sequence',
    (
        (mkg(), None, []),
        (mkg(['a']), 'a', ['a']),
        (mkg(edges=[('a', 'b')]), 'a', ['a', 'b']),
        (mkg(edges=[('a', 'b')]), 'b', ['b', 'a']),
        (mkg(edges=[(1, 2), (2, 3), (3, 1), (1, 4), (4, 5)], graph_type=Digraph), 4, ['4', '5', '1', '2', '3']),
        (
            BIG_GRAPH_1, 1,
            ['1', '3', '7', '15', '14', '6', '13', '12', '2', '5', '11', '10', '4', '9', '8', '17', '16'],
        ),
        (
            BIG_GRAPH_2, 1,
            ['1', '16', '8', '17', '4', '9', '2', '5', '11', '10', '3', '7', '15', '14', '6', '13', '12'],
        ),
        (
            BIG_DIGRAPH_1, 1,
            ['1', '3', '7', '15', '14', '6', '13', '12', '2', '5', '11', '10', '4', '9', '8', '17', '16'],
        ),
        (
            BIG_DIGRAPH_2, 1,
            ['1', '16', '3', '7', '15', '14', '6', '13', '12', '2', '5', '11', '10', '4', '9', '8', '17'],
        ),
    ),
)
def test_dfs_iterator(graph: Graph, start_vertex_name: StrConvertable, expected_sequence: list[str]) -> None:
    sequence = [v.name for v in DfsIterator(graph, graph.get_vertex(start_vertex_name, default=None))]
    assert sequence == expected_sequence


@pytest.mark.parametrize(
    'graph, start_vertex_name, expected_sequence',
    (
        (mkg(), None, []),
        (mkg(['a']), 'a', ['a']),
        (mkg(edges=[('a', 'b')]), 'a', ['a', 'b']),
        (mkg(edges=[('a', 'b')]), 'b', ['b', 'a']),
        (mkg(edges=[(1, 2), (2, 3), (3, 1), (1, 4), (4, 5)], graph_type=Digraph), 4, ['4', '5', '1', '2', '3']),
        (
            BIG_GRAPH_1, 1,
            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17'],
        ),
        (
            BIG_GRAPH_2, 1,
            ['1', '2', '3', '16', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '17'],
        ),
        (
            BIG_DIGRAPH_1, 1,
            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17'],
        ),
        (
            BIG_DIGRAPH_2, 1,
            ['1', '2', '3', '16', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '17'],
        ),
    ),
)
def test_bfs_iterator(graph: Graph, start_vertex_name: StrConvertable, expected_sequence: list[str]) -> None:
    sequence = [v.name for v in BfsIterator(graph, graph.get_vertex(start_vertex_name, default=None))]
    assert sequence == expected_sequence
